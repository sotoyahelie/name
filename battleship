import random

def initialize_board(size):
    """
    Initializes the game board with empty cells.

    Parameters:
    - size (int): The size of the square game board.

    Returns:
    - list of lists: A 2D list representing the game board.
    """
    return [['O' for _ in range(size)] for _ in range(size)]

def print_board(board):
    """
    Displays the current state of the game board.

    Parameters:
    - board (list of lists): The 2D list representing the game board.
    """
    print("  1 2 3 4 5")
    for i, row in enumerate(board, start=1):
        print(f"{i} {' '.join(row)}")

def place_ship(board, ship_size):
    """
    Places a battleship on the game board.

    Parameters:
    - board (list of lists): The 2D list representing the game board.
    - ship_size (int): The size of the battleship to be placed.

    Returns:
    - tuple: The coordinates (row, column) of the placed battleship.
    """
    while True:
        orientation = random.choice(['horizontal', 'vertical'])
        if orientation == 'horizontal':
            row = random.randint(0, len(board) - 1)
            col = random.randint(0, len(board) - ship_size)
        else:
            row = random.randint(0, len(board) - ship_size)
            col = random.randint(0, len(board) - 1)

        if is_valid_placement(board, row, col, ship_size, orientation):
            if orientation == 'horizontal':
                for c in range(col, col + ship_size):
                    board[row][c] = 'S'
            else:
                for r in range(row, row + ship_size):
                    board[r][col] = 'S'
            return row, col

def is_valid_placement(board, row, col, ship_size, orientation):
    """
    Checks if placing a battleship at the given position is valid.

    Parameters:
    - board (list of lists): The 2D list representing the game board.
    - row (int): The starting row coordinate.
    - col (int): The starting column coordinate.
    - ship_size (int): The size of the battleship to be placed.
    - orientation (str): The orientation of the battleship ('horizontal' or 'vertical').

    Returns:
    - bool: True if the placement is valid, False otherwise.
    """
    if orientation == 'horizontal':
        return all(board[row][c] == 'O' for c in range(col, col + ship_size))
    else:
        return all(board[r][col] == 'O' for r in range(row, row + ship_size))

def get_user_guess():
    """
    Gets the user's guess for the position of the battleship.

    Returns:
    - tuple: The user's guess as (row, column).
    """
    while True:
        try:
            row = int(input("Enter the row (1-5): ")) - 1
            col = int(input("Enter the column (1-5): ")) - 1

            if 0 <= row <= 4 and 0 <= col <= 4:
                return row, col
            else:
                print("Invalid input. Row and column must be between 1 and 5.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def main():
    board_size = 5
    ship_size = 3

    print("Welcome to Battleship!")
    player_board = initialize_board(board_size)
    print_board(player_board)

    ship_row, ship_col = place_ship(player_board, ship_size)

    attempts = 0
    while True:
        user_row, user_col = get_user_guess()
        attempts += 1

        if (user_row, user_col) == (ship_row, ship_col):
            print("Congratulations! You sank the battleship in", attempts, "attempts.")
            break
        else:
            print("Miss! Try again.")
            player_board[user_row][user_col] = 'X'
            print_board(player_board)

if __name__ == "__main__":
    main()
